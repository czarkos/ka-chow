{{include_text('defines.yaml')}}

architecture:
  nodes: &macro # TOP MACRO
  # ===========================================================================
  - !Container # Macro top-level
    name: macro
    <<<: [*container_defaults]

  {{ignoreme_placeholder | default('') | indent(2)}}

  - !Component # Packet_io models the network stream of the inputs
    name: packet_io
    <<<: [*component_defaults, *keep_inputs]
    subclass: lightning_io
    attributes:
      depth: 4096
      width: 512
      datawidth: 8
      n_instances: BATCH_SIZE*NUM_WAVELENGTHS

  - !Component # There are n_instances memory controllers (one for each weight-split) that represent the weight memory
    name: memory_controller
    <<<: [*component_defaults, *keep_weights]
    subclass: lightning_sram
    attributes:
      depth: 4096
      width: 512
      datawidth: 8
      n_instances: NUM_PARALLEL_WEIGHTS*NUM_WAVELENGTHS

  - !Component # One laser at the top of the design
    name: laser
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: lightning_laser
    attributes: {width: DAC_RESOLUTION*NUM_PARALLEL_WEIGHTS*NUM_WAVELENGTHS, <<: *cim_component_attributes}
  
  - !Component
    name: weight_dacs
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: dac_lightning
    attributes: {width: DAC_RESOLUTION, n_instances: NUM_PARALLEL_WEIGHTS*NUM_WAVELENGTHS}
  
  - !Component
    name: weight_modulators
    <<<: [*component_defaults, *keep_weights, *no_coalesce]
    subclass: lightning_modulator
    attributes: {width: INPUT_BITS, n_instances: NUM_PARALLEL_WEIGHTS*NUM_WAVELENGTHS}

  - !ArrayContainer
    name: IMU
    <<<: [*container_defaults, *spatial_must_reuse_weights]
    spatial: {meshX: BATCH_SIZE}
    constraints: {spatial: {maximize_dims: []}}
    max_utilization: {spatial: {factors: [('M=' + str(IMU.get_fanout()))]}}

  - !Component # Column readout (ADC)
    name: adc
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: adc_lightning
    attributes: {width: ENCODED_OUTPUT_BITS, <<<: *cim_component_attributes, n_instances: NUM_PARALLEL_WEIGHTS}

  - !Component # Photodetectors
    name: photodetector
    <<<: [*component_defaults, *keep_outputs, *no_coalesce]
    subclass: lightning_photodiode
    attributes:
        width: ENCODED_OUTPUT_BITS*max(NUM_PARALLEL_WEIGHTS, NUM_WAVELENGTHS)
        <<<: *cim_component_attributes
        n_instances: NUM_PARALLEL_WEIGHTS

  - !ArrayContainer
    name: input_modulator
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: NUM_WAVELENGTHS}
    constraints: {spatial: {maximize_dims: [C, R, S]}}
    max_utilization: {spatial: {factors: [('C=' + str(input_modulator.get_fanout()))]}} 

  - !Component
    name: input_dac
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: dac_lightning
    attributes: {width: DAC_RESOLUTION}

  - !Component
    name: individual_modulator_placeholder
    <<<: [*component_defaults, *keep_inputs, *no_coalesce]
    subclass: lightning_modulator
    attributes: {width: INPUT_BITS}

  - !ArrayContainer
    name: virtualized_modulator
    <<<: [*container_defaults, *spatial_must_reuse_outputs]
    spatial: {meshY: NUM_WAVELENGTHS}
    constraints: {spatial: {maximize_dims: [C, R, S]}}
    max_utilization: {spatial: {factors: [('C=' + str(virtualized_modulator.get_fanout()))]}}
  
  - !Hierarchical           # Virtualize an XxYxZ-bit modulator as multiple modulator units.
    nodes: *virtualized_submodulator # Defined in include/defines.yaml.
